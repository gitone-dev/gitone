<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dev.gitone.server.mappers.SshKeyMapper">
    <resultMap id="sshKeyMap" type="dev.gitone.server.entities.SshKeyEntity">
        <id property="id" column="id" jdbcType="INTEGER" />
        <result property="createdAt" column="created_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
        <result property="updatedAt" column="updated_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
        <result property="namespaceId" column="namespace_id" jdbcType="INTEGER" />
        <result property="title" column="title" jdbcType="VARCHAR" />
        <result property="key" column="key" jdbcType="VARCHAR" />
        <result property="fingerprint" column="fingerprint" jdbcType="BINARY" />
        <result property="usages" column="usages" jdbcType="ARRAY" />
        <result property="lastUsedAt" column="last_used_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
        <result property="expiresAt" column="expires_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
        <result property="createdById" column="created_by_id" jdbcType="INTEGER" />
    </resultMap>
    <sql id="sshKeyColumns">
        sk.id,
        sk.created_at,
        sk.updated_at,
        sk.namespace_id,
        sk.title,
        sk.key,
        sk.fingerprint,
        sk.usages,
        sk.last_used_at,
        sk.expires_at,
        sk.created_by_id
    </sql>
    <sql id="filter">
        <if test="filter.traversalIds != null and !filter.traversalIds.empty ">
            AND sk.namespace_id IN
            <foreach collection="filter.traversalIds " open="(" item="namespaceId" separator="," close=")" >
                #{namespaceId,jdbcType=INTEGER}
            </foreach>
        </if>
        <if test="filter.fingerprint != null">
            AND sk.fingerprint = #{filter.fingerprint,jdbcType=BINARY}
        </if>
        <if test="filter.query != null">
            AND sk.title LIKE '%' || #{filter.query,jdbcType=VARCHAR} || '%'
        </if>
    </sql>
    <sql id="direction">${page.direction(before)}</sql>
    <sql id="cursorOp">
        <choose>
            <when test="cursor.createdAt != null">
                AND (
                    sk.created_at = #{cursor.createdAt,jdbcType=TIMESTAMP_WITH_TIMEZONE} AND sk.id &gt; #{cursor.id,jdbcType=INTEGER}
                    OR sk.created_at <include refid="direction" /> #{cursor.createdAt,jdbcType=TIMESTAMP_WITH_TIMEZONE}
                )
            </when>
            <when test="cursor.updatedAt != null">
                AND (
                    sk.updated_at = #{cursor.updatedAt,jdbcType=TIMESTAMP_WITH_TIMEZONE} AND sk.id &gt; #{cursor.id,jdbcType=INTEGER}
                    OR sk.updated_at <include refid="direction" /> #{cursor.updatedAt,jdbcType=TIMESTAMP_WITH_TIMEZONE}
                )
            </when>
            <when test="cursor.title != null">
                AND (
                    sk.title = #{cursor.title,jdbcType=VARCHAR} AND sk.id &gt; #{cursor.id,jdbcType=INTEGER}
                    OR sk.title <include refid="direction" /> #{cursor.title,jdbcType=VARCHAR}
                )
            </when>
        </choose>
    </sql>
    <sql id="page">
        <if test="page.before != null">
            <bind name="before" value="true"/>
            <bind name="cursor" value="page.before"/>
            <include refid="cursorOp" />
        </if>
        <if test="page.after != null">
            <bind name="before" value="false"/>
            <bind name="cursor" value="page.after"/>
            <include refid="cursorOp" />
        </if>
    </sql>
    <select id="find" parameterType="java.lang.Integer" resultMap="sshKeyMap">
        SELECT <include refid="sshKeyColumns" />
        FROM ssh_keys AS sk
        WHERE sk.id = #{id,jdbcType=INTEGER}
    </select>
    <select id="findByIds" parameterType="java.util.Collection" resultMap="sshKeyMap">
        SELECT <include refid="sshKeyColumns" />
        FROM ssh_keys AS sk
        WHERE sk.id IN
        <foreach collection="ids" open="(" item="id" separator="," close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </select>
    <select id="findByFingerprint" resultMap="sshKeyMap">
        SELECT <include refid="sshKeyColumns" />
        FROM ssh_keys AS sk
        WHERE sk.fingerprint = #{fingerprint,jdbcType=BINARY}
    </select>
    <select id="findByNamespaceId" resultMap="sshKeyMap">
        SELECT <include refid="sshKeyColumns" />
        FROM ssh_keys AS sk
        WHERE sk.namespace_id = #{namespaceId,jdbcType=INTEGER}
    </select>
    <select id="findAll" resultMap="sshKeyMap">
        SELECT <include refid="sshKeyColumns" />
        FROM ssh_keys AS sk
        <where>
            <include refid="filter" />
            <include refid="page" />
        </where>
        ORDER BY sk.${page.order.field} ${page.orderDirection}, sk.id ASC
        LIMIT #{page.limit,jdbcType=INTEGER}
    </select>
    <insert id="create" parameterType="dev.gitone.server.entities.SshKeyEntity" keyProperty="id" useGeneratedKeys="true" >
        INSERT INTO ssh_keys (
            created_at,
            updated_at,
            namespace_id,
            title,
            key,
            fingerprint,
            usages,
            last_used_at,
            expires_at,
            created_by_id
        ) VALUES (
            #{createdAt,jdbcType=TIMESTAMP},
            #{updatedAt,jdbcType=TIMESTAMP},
            #{namespaceId,jdbcType=INTEGER},
            #{title,jdbcType=VARCHAR},
            #{key,jdbcType=VARCHAR},
            #{fingerprint,jdbcType=BINARY},
            #{usages,jdbcType=ARRAY},
            #{lastUsedAt,jdbcType=TIMESTAMP},
            #{expiresAt,jdbcType=TIMESTAMP},
            #{createdById,jdbcType=INTEGER}
        )
    </insert>
    <update id="update" parameterType="dev.gitone.server.entities.SshKeyEntity">
        UPDATE ssh_keys SET
            created_at = #{createdAt,jdbcType=TIMESTAMP},
            updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            namespace_id = #{namespaceId,jdbcType=INTEGER},
            title = #{title,jdbcType=VARCHAR},
            key = #{key,jdbcType=VARCHAR},
            fingerprint = #{fingerprint,jdbcType=BINARY},
            usages = #{usages,jdbcType=ARRAY},
            last_used_at = #{lastUsedAt,jdbcType=TIMESTAMP},
            expires_at = #{expiresAt,jdbcType=TIMESTAMP},
            created_by_id = #{createdById,jdbcType=INTEGER}
        WHERE id = #{id,jdbcType=INTEGER}
    </update>
    <delete id="delete" parameterType="dev.gitone.server.entities.SshKeyEntity">
        DELETE FROM ssh_keys
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>
</mapper>

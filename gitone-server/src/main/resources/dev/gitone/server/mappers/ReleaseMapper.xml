<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dev.gitone.server.mappers.ReleaseMapper">
    <resultMap id="releaseMap" type="dev.gitone.server.entities.ReleaseEntity">
        <id property="id" column="id" jdbcType="INTEGER" />
        <result property="createdAt" column="created_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
        <result property="updatedAt" column="updated_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
        <result property="projectId" column="project_id" jdbcType="INTEGER" />
        <result property="tagName" column="tag_name" jdbcType="VARCHAR" />
        <result property="title" column="title" jdbcType="VARCHAR" />
        <result property="description" column="description" jdbcType="VARCHAR" />
        <result property="createdById" column="created_by_id" jdbcType="INTEGER" />
    </resultMap>
    <sql id="releaseColumns">
        id,
        created_at,
        updated_at,
        project_id,
        tag_name,
        title,
        description,
        created_by_id
    </sql>
    <sql id="filter">
        <if test="filter.projectId != null">
            AND project_id = #{filter.projectId,jdbcType=INTEGER}
        </if>
        <if test="filter.query != null">
            AND tag_name LIKE '%' || #{filter.query,jdbcType=VARCHAR} || '%'
        </if>
    </sql>
    <sql id="direction">${page.direction(before)}</sql>
    <sql id="cursorOp">
        <choose>
            <when test="cursor.createdAt != null">
                AND (
                    created_at = #{cursor.createdAt,jdbcType=TIMESTAMP_WITH_TIMEZONE} AND id &gt; #{cursor.id,jdbcType=INTEGER}
                    OR created_at <include refid="direction" /> #{cursor.createdAt,jdbcType=TIMESTAMP_WITH_TIMEZONE}
                )
            </when>
            <when test="cursor.tagName != null">
                AND (
                    tag_name = #{cursor.tagName,jdbcType=VARCHAR} AND id &gt; #{cursor.id,jdbcType=INTEGER}
                    OR tag_name <include refid="direction" /> #{cursor.tagName,jdbcType=VARCHAR}
                )
            </when>
        </choose>
    </sql>
    <sql id="page">
        <if test="page.before != null">
            <bind name="before" value="true"/>
            <bind name="cursor" value="page.before"/>
            <include refid="cursorOp" />
        </if>
        <if test="page.after != null">
            <bind name="before" value="false"/>
            <bind name="cursor" value="page.after"/>
            <include refid="cursorOp" />
        </if>
    </sql>
    <select id="find" parameterType="java.lang.Integer" resultMap="releaseMap">
        SELECT <include refid="releaseColumns" />
        FROM releases
        WHERE id = #{id,jdbcType=INTEGER}
    </select>
    <select id="findByIds" parameterType="java.util.Collection" resultMap="releaseMap">
        SELECT <include refid="releaseColumns" />
        FROM releases
        WHERE id IN
        <foreach collection="ids" open="(" item="id" separator="," close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </select>
    <select id="findByProjectIdAndTagName" resultMap="releaseMap">
        SELECT <include refid="releaseColumns" />
        FROM releases
        WHERE project_id = #{projectId,jdbcType=INTEGER} and tag_name = #{tagName,jdbcType=VARCHAR}
    </select>
    <select id="findByProjectIdAndTagNames" resultMap="releaseMap">
        SELECT <include refid="releaseColumns" />
        FROM releases
        WHERE project_id = #{projectId,jdbcType=INTEGER} and tag_name IN
        <foreach collection="tagNames" open="(" item="tagName" separator="," close=")">
            #{tagName,jdbcType=INTEGER}
        </foreach>
    </select>
    <select id="findAll" resultMap="releaseMap">
        SELECT <include refid="releaseColumns" />
        FROM releases
        <where>
            <include refid="filter" />
            <include refid="page" />
        </where>
        ORDER BY ${page.order.field} ${page.orderDirection}, id ASC
        LIMIT #{page.limit,jdbcType=INTEGER}
    </select>
    <insert id="create" parameterType="dev.gitone.server.entities.ReleaseEntity" keyProperty="id" useGeneratedKeys="true" >
        INSERT INTO releases (
            created_at,
            updated_at,
            project_id,
            tag_name,
            title,
            description,
            created_by_id
        ) VALUES (
            #{createdAt,jdbcType=TIMESTAMP},
            #{updatedAt,jdbcType=TIMESTAMP},
            #{projectId,jdbcType=INTEGER},
            #{tagName,jdbcType=VARCHAR},
            #{title,jdbcType=VARCHAR},
            #{description,jdbcType=VARCHAR},
            #{createdById,jdbcType=INTEGER}
        )
    </insert>
    <update id="update" parameterType="dev.gitone.server.entities.ReleaseEntity">
        UPDATE releases SET
            created_at = #{createdAt,jdbcType=TIMESTAMP},
            updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            project_id = #{projectId,jdbcType=INTEGER},
            tag_name = #{tagName,jdbcType=VARCHAR},
            title = #{title,jdbcType=VARCHAR},
            description= #{description,jdbcType=VARCHAR},
            created_by_id = #{createdById,jdbcType=INTEGER}
        WHERE id = #{id,jdbcType=INTEGER}
    </update>
    <delete id="delete" parameterType="dev.gitone.server.entities.ReleaseEntity">
        DELETE FROM releases
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>
</mapper>

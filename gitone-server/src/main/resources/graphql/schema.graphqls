scalar DateTime

interface Node {
  id: ID!
}

enum OrderDirection {
  ASC
  DESC
}

enum Visibility {
  PRIVATE
  PUBLIC
}

enum Action {
  READ
  UPDATE
  DELETE
  READ_MEMBER
  CREATE_MEMBER
  UPDATE_MEMBER
  DELETE_MEMBER
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String
  endCursor: String
}

schema {
  query: Query
  mutation: Mutation
}

type Query {
  ping: String!

  existEmail(email: String!): Boolean!
  existFullPath(fullPath: String!): Boolean!

  viewer: User!
  user(username: String!): User!
  users(
    first: Int = 20
    after: String
    filterBy: UserFilter
    orderBy: UserOrder = { field: CREATED_AT, direction: ASC }
  ): UserConnection

  namespace(fullPath: String!): Namespace!
  namespacePolicy(fullPath: String!): Policy!
  namespaces(
    first: Int = 20
    after: String
    filterBy: NamespaceFilter
    orderBy: NamespaceOrder = { field: CREATED_AT, direction: DESC }
  ): NamespaceConnection

  group(fullPath: String!): Group!
  groupPolicy(fullPath: String!): Policy!
  groups(
    first: Int = 20
    after: String
    filterBy: GroupFilter
    orderBy: GroupOrder = { field: CREATED_AT, direction: DESC }
  ): GroupConnection

  project(fullPath: String!): Project!
  projectPolicy(fullPath: String!): Policy!
  projects(
    first: Int = 20
    after: String
    filterBy: ProjectFilter
    orderBy: ProjectOrder = { field: CREATED_AT, direction: DESC }
  ): ProjectConnection
}

type Policy implements Node {
  id: ID!
  access: Access!
  actions: [Action!]!
}

type Mutation {
  # session
  createSession(input: CreateSessionInput!): CreateSessionPayload
  deleteSession: DeleteSessionPayload

  # user
  createUser(input: CreateUserInput!): CreateUserPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload

  updateActivationEmail(
    input: UpdateActivationEmailInput!
  ): UpdateActivationEmailPayload
  sendActivationEmail(
    input: SendActivationEmailInput!
  ): SendActivationEmailPayload
  activateUser(input: ActivateUserInput!): ActivateUserPayload

  sendPasswordResetEmail(
    input: SendPasswordResetEmailInput!
  ): SendPasswordResetEmailPayload
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload

  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateUsername(input: UpdateUsernameInput!): UpdateUsernamePayload
  updatePassword(input: UpdatePasswordInput!): UpdatePasswordPayload

  createEmail(input: CreateEmailInput!): CreateEmailPayload
  confirmEmail(input: ConfirmEmailInput!): ConfirmEmailPayload
  setPrimaryEmail(input: SetPrimaryEmailInput!): SetPrimaryEmailPayload
  deleteEmail(input: DeleteEmailInput!): DeleteEmailPayload

  # group

  createGroup(input: CreateGroupInput!): CreateGroupPayload
  deleteGroup(input: DeleteGroupInput!): DeleteGroupPayload
  updateGroup(input: UpdateGroupInput!): UpdateGroupPayload
  updateGroupPath(input: UpdateGroupPathInput!): UpdateGroupPathPayload
  updateGroupVisibility(input: UpdateGroupVisibilityInput!): UpdateGroupVisibilityPayload

  # member

  createMember(input: CreateMemberInput!): CreateMemberPayload
  updateMember(input: UpdateMemberInput!): UpdateMemberPayload
  deleteMember(input: DeleteMemberInput!): DeleteMemberPayload

  # project

  createProject(input: CreateProjectInput!): CreateProjectPayload
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  updateProjectPath(input: UpdateProjectPathInput!): UpdateProjectPathPayload
  updateProjectVisibility(input: UpdateProjectVisibilityInput!): UpdateProjectVisibilityPayload
}

# session

type Session {
  email: String
  username: String!
  header: String!
  token: String!
  active: Boolean!
}

input CreateSessionInput {
  username: String!
  password: String!
}

type CreateSessionPayload {
  session: Session
}

type DeleteSessionPayload {
  message: String
}

# namespace

enum NamespaceType {
  USER
  GROUP
  PROJECT
}

type Namespace implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  type: NamespaceType
  name: String
  path: String
  fullName: String
  fullPath: String
  visibility: Visibility!
  description: String
}

type NamespaceEdge {
  node: Namespace!
  cursor: String!
}

type NamespaceConnection {
  edges: [NamespaceEdge!]
  pageInfo: PageInfo
}

input NamespaceFilter {
  parentId: ID
  recursive: Boolean
  visibility: Visibility
  query: String
  username: String
  types: [NamespaceType!]
}

input NamespaceOrder {
  direction: OrderDirection!
  field: NamespaceOrderField!
}

enum NamespaceOrderField {
  CREATED_AT
  UPDATED_AT
  PATH
}

# group

type Group implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  path: String
  fullName: String
  fullPath: String
  visibility: Visibility!
  description: String
  members(
    first: Int = 20
    after: String
    filterBy: MemberFilter
    orderBy: MemberOrder = { field: CREATED_AT, direction: DESC }
  ): MemberConnection
}

type GroupEdge {
  node: Group!
  cursor: String!
}

type GroupConnection {
  edges: [GroupEdge!]
  pageInfo: PageInfo
}

input GroupFilter {
  parentId: ID
  recursive: Boolean
  visibility: Visibility
  query: String
  username: String
}

input GroupOrder {
  direction: OrderDirection!
  field: GroupOrderField!
}

enum GroupOrderField {
  CREATED_AT
  UPDATED_AT
  PATH
}

input CreateGroupInput {
  parentId: ID
  name: String!
  path: String!
  description: String!
  visibility: Visibility!
}

type CreateGroupPayload {
  group: Group
}

input DeleteGroupInput {
  id: ID!
}

type DeleteGroupPayload {
  group: Group
}

input UpdateGroupInput {
  id: ID!
  name: String!
  description: String!
}

type UpdateGroupPayload {
  group: Group
}

input UpdateGroupPathInput {
  id: ID!
  path: String!
}

type UpdateGroupPathPayload {
  group: Group
}

input UpdateGroupVisibilityInput {
  id: ID!
  visibility: Visibility!
}

type UpdateGroupVisibilityPayload {
  group: Group
}

# project

type Project implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  path: String
  fullName: String
  fullPath: String
  visibility: Visibility!
  description: String
  members(
    first: Int = 20
    after: String
    filterBy: MemberFilter
    orderBy: MemberOrder = { field: CREATED_AT, direction: DESC }
  ): MemberConnection
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

type ProjectConnection {
  edges: [ProjectEdge!]
  pageInfo: PageInfo
}

input ProjectFilter {
  parentId: ID
  recursive: Boolean
  visibility: Visibility
  query: String
  username: String
}

input ProjectOrder {
  direction: OrderDirection!
  field: ProjectOrderField!
}

enum ProjectOrderField {
  CREATED_AT
  UPDATED_AT
  PATH
}

input CreateProjectInput {
  parentId: ID!
  name: String!
  path: String!
  description: String!
  visibility: Visibility!
}

type CreateProjectPayload {
  project: Project
}

input DeleteProjectInput {
  id: ID!
}

type DeleteProjectPayload {
  project: Project
}

input UpdateProjectInput {
  id: ID!
  name: String!
  description: String!
}

type UpdateProjectPayload {
  project: Project
}

input UpdateProjectPathInput {
  id: ID!
  path: String!
}

type UpdateProjectPathPayload {
  project: Project
}

input UpdateProjectVisibilityInput {
  id: ID!
  visibility: Visibility!
}

type UpdateProjectVisibilityPayload {
  project: Project
}

# user

type User implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  username: String
  active: Boolean
  role: Role
  avatarUrl: String
  bio: String
  location: String
  websiteUrl: String

  namespace: Namespace

  emails: EmailConnection
  unconfirmedEmails: EmailConnection
}

enum Role {
  USER
  ADMIN
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserConnection {
  edges: [UserEdge!]
  pageInfo: PageInfo
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField!
}

enum UserOrderField {
  CREATED_AT
  UPDATED_AT
  USERNAME
}

input UserFilter {
  query: String
}

input CreateUserInput {
  email: String!
  name: String!
  username: String!
  password: String!
}

type CreateUserPayload {
  user: User
}

input DeleteUserInput {
  id: ID!
}

type DeleteUserPayload {
  user: User
}

input UpdateActivationEmailInput {
  email: String!
}

type UpdateActivationEmailPayload {
  message: String
}

input SendActivationEmailInput {
  email: String
}

type SendActivationEmailPayload {
  message: String
}

input ActivateUserInput {
  token: String!
}

type ActivateUserPayload {
  message: String
}

input SendPasswordResetEmailInput {
  email: String!
}

type SendPasswordResetEmailPayload {
  message: String
}

input ResetPasswordInput {
  token: String!
  password: String!
}

type ResetPasswordPayload {
  message: String
}

input UpdateUserInput {
  name: String!
  bio: String!
  location: String!
  websiteUrl: String!
}

type UpdateUserPayload {
  user: User
}

input UpdateUsernameInput {
  username: String!
}

type UpdateUsernamePayload {
  user: User
}

input UpdatePasswordInput {
  oldPassword: String!
  password: String!
  passwordConfirmation: String!
}

type UpdatePasswordPayload {
  user: User
}

# email

type Email implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  email: String!
  primary: Boolean!
}

type EmailEdge {
  node: Email!
  cursor: String!
}

type EmailConnection {
  edges: [EmailEdge!]
  pageInfo: PageInfo
}
input CreateEmailInput {
  email: String!
}

type CreateEmailPayload {
  email: Email
}

input ConfirmEmailInput {
  token: String!
}

type ConfirmEmailPayload {
  email: Email
}

input SetPrimaryEmailInput {
  email: String!
}

type SetPrimaryEmailPayload {
  email: Email
}

input DeleteEmailInput {
  email: String!
}

type DeleteEmailPayload {
  email: Email
}

# member

enum Access {
  NO_ACCESS
  MIN_ACCESS
  REPORTER
  MAINTAINER
  OWNER
}

type Member {
  id: ID!
  access: Access
  createdAt: DateTime
  updatedAt: DateTime
  namespace: Namespace
  user: User
}

type MemberEdge {
  node: Member!
  cursor: String!
}

type MemberConnection {
  edges: [MemberEdge!]
  pageInfo: PageInfo
}

input MemberFilter {
  query: String
  access: Access
}

enum MemberOrderField {
  CREATED_AT
  UPDATED_AT
  ACCESS
  USERNAME
}

input MemberOrder {
  direction: OrderDirection!
  field: MemberOrderField!
}

input CreateMemberInput {
  namespaceId: String!
  userId: String!
  access: Access!
}

type CreateMemberPayload {
  member: Member
}

input UpdateMemberInput {
  id: ID!
  access: Access!
}

type UpdateMemberPayload {
  member: Member
}

input DeleteMemberInput {
  id: ID!
}

type DeleteMemberPayload {
  member: Member
}

scalar DateTime
scalar Long

interface Node {
  id: ID!
}

enum OrderDirection {
  ASC
  DESC
}

enum Visibility {
  PRIVATE
  PUBLIC
}

enum Action {
  READ
  UPDATE
  DELETE
  READ_MEMBER
  CREATE_MEMBER
  UPDATE_MEMBER
  DELETE_MEMBER
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String
  endCursor: String
}

schema {
  query: Query
  mutation: Mutation
}

type Query {
  ping: String!

  existEmail(email: String!): Boolean!

  viewer: User!
  viewerPolicy: Policy!
  user(username: String!): User!
  users(
    first: Int = 20
    after: String
    filterBy: UserFilter
    orderBy: UserOrder = { field: CREATED_AT, direction: ASC }
  ): UserConnection

  members(
    fullPath: String!
    first: Int = 20
    after: String
    filterBy: MemberFilter
    orderBy: MemberOrder = { field: CREATED_AT, direction: DESC }
  ): MemberConnection

  sshKeys(
    fullPath: String!
    first: Int = 20
    after: String
    filterBy: SshKeyFilter
    orderBy: SshKeyOrder = { field: CREATED_AT, direction: DESC }
  ): SshKeyConnection

  registeredClient(id: ID!): RegisteredClient!
  registeredClients(
    fullPath: String!
    first: Int = 20
    after: String
    filterBy: RegisteredClientFilter
    orderBy: RegisteredClientOrder = { field: CREATED_AT, direction: DESC }
  ): RegisteredClientConnection

  existFullPath(fullPath: String!): Boolean!
  namespace(fullPath: String): Namespace!
  namespacePolicy(fullPath: String): Policy!
  namespaces(
    first: Int = 20
    after: String
    filterBy: NamespaceFilter
    orderBy: NamespaceOrder = { field: CREATED_AT, direction: DESC }
  ): NamespaceConnection

  group(fullPath: String!): Group!
  groups(
    first: Int = 20
    after: String
    filterBy: GroupFilter
    orderBy: GroupOrder = { field: CREATED_AT, direction: DESC }
  ): GroupConnection

  project(fullPath: String!): Project!
  projects(
    first: Int = 20
    after: String
    filterBy: ProjectFilter
    orderBy: ProjectOrder = { field: CREATED_AT, direction: DESC }
  ): ProjectConnection

  repository(fullPath: String!): Repository!
}

type Policy implements Node {
  id: ID!
  access: Access!
  actions: [Action!]!
}

type Mutation {
  # user

  createUser(input: CreateUserInput!): CreateUserPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload

  updateActivationEmail(
    input: UpdateActivationEmailInput!
  ): UpdateActivationEmailPayload
  sendActivationEmail(
    input: SendActivationEmailInput!
  ): SendActivationEmailPayload
  activateUser(input: ActivateUserInput!): ActivateUserPayload

  sendPasswordResetEmail(
    input: SendPasswordResetEmailInput!
  ): SendPasswordResetEmailPayload
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload

  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updatePassword(input: UpdatePasswordInput!): UpdatePasswordPayload

  createEmail(input: CreateEmailInput!): CreateEmailPayload
  confirmEmail(input: ConfirmEmailInput!): ConfirmEmailPayload
  setPrimaryEmail(input: SetPrimaryEmailInput!): SetPrimaryEmailPayload
  deleteEmail(input: DeleteEmailInput!): DeleteEmailPayload

  # group

  createGroup(input: CreateGroupInput!): CreateGroupPayload
  deleteGroup(input: DeleteGroupInput!): DeleteGroupPayload
  updateGroup(input: UpdateGroupInput!): UpdateGroupPayload

  # project

  createProject(input: CreateProjectInput!): CreateProjectPayload
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload

  # namespaces

  updateVisibility(input: UpdateVisibilityInput!): UpdateVisibilityPayload
  updatePath(input: UpdatePathInput!): UpdatePathPayload

  # member

  createMember(input: CreateMemberInput!): CreateMemberPayload
  updateMember(input: UpdateMemberInput!): UpdateMemberPayload
  deleteMember(input: DeleteMemberInput!): DeleteMemberPayload

  # ssh key

  createSshKey(input: CreateSshKeyInput!): CreateSshKeyPayload
  updateSshKey(input: UpdateSshKeyInput!): UpdateSshKeyPayload
  deleteSshKey(input: DeleteSshKeyInput!): DeleteSshKeyPayload

  # oauth2 / open connect id

  createRegisteredClient(input: CreateRegisteredClientInput!): CreateRegisteredClientPayload
  updateRegisteredClient(input: UpdateRegisteredClientInput!): UpdateRegisteredClientPayload
  deleteRegisteredClient(input: DeleteRegisteredClientInput!): DeleteRegisteredClientPayload

  # repository

  createBranch(input: CreateBranchInput!): CreateBranchPayload
  deleteBranch(input: DeleteBranchInput!): DeleteBranchPayload

  createTag(input: CreateTagInput!): CreateTagPayload
  deleteTag(input: DeleteTagInput!): DeleteTagPayload
}

# namespace

enum NamespaceType {
  USER
  GROUP
  PROJECT
}

interface Namespace implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  path: String
  fullName: String
  fullPath: String
  visibility: Visibility!
  description: String
  avatarUrl: String
}

type NamespaceEdge {
  node: Namespace!
  cursor: String!
}

type NamespaceConnection {
  edges: [NamespaceEdge!]
  pageInfo: PageInfo
}

input NamespaceFilter {
  parentId: ID
  recursive: Boolean
  visibility: Visibility
  query: String
  username: String
  types: [NamespaceType!]
}

input NamespaceOrder {
  direction: OrderDirection!
  field: NamespaceOrderField!
}

enum NamespaceOrderField {
  CREATED_AT
  UPDATED_AT
  PATH
}

input UpdateVisibilityInput {
  fullPath: String!
  visibility: Visibility!
}

type UpdateVisibilityPayload {
  namespace: Namespace
}

input UpdatePathInput {
  fullPath: String!
  path: String!
}

type UpdatePathPayload {
  namespace: Namespace
}

# group

type Group implements Node & Namespace {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  path: String
  fullName: String
  fullPath: String
  visibility: Visibility!
  description: String
  avatarUrl: String
}

type GroupEdge {
  node: Group!
  cursor: String!
}

type GroupConnection {
  edges: [GroupEdge!]
  pageInfo: PageInfo
}

input GroupFilter {
  parentId: ID
  recursive: Boolean
  visibility: Visibility
  query: String
  username: String
}

input GroupOrder {
  direction: OrderDirection!
  field: GroupOrderField!
}

enum GroupOrderField {
  CREATED_AT
  UPDATED_AT
  PATH
}

input CreateGroupInput {
  parentId: ID
  name: String!
  path: String!
  description: String!
  visibility: Visibility!
}

type CreateGroupPayload {
  group: Group
}

input DeleteGroupInput {
  id: ID!
}

type DeleteGroupPayload {
  group: Group
}

input UpdateGroupInput {
  id: ID!
  name: String!
  description: String!
}

type UpdateGroupPayload {
  group: Group
}

# project

type Project implements Node & Namespace {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  path: String
  fullName: String
  fullPath: String
  visibility: Visibility!
  description: String
  avatarUrl: String
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

type ProjectConnection {
  edges: [ProjectEdge!]
  pageInfo: PageInfo
}

input ProjectFilter {
  parentId: ID
  recursive: Boolean
  visibility: Visibility
  query: String
  username: String
}

input ProjectOrder {
  direction: OrderDirection!
  field: ProjectOrderField!
}

enum ProjectOrderField {
  CREATED_AT
  UPDATED_AT
  PATH
}

input CreateProjectInput {
  parentId: ID!
  name: String!
  path: String!
  description: String!
  visibility: Visibility!
}

type CreateProjectPayload {
  project: Project
}

input DeleteProjectInput {
  id: ID!
}

type DeleteProjectPayload {
  project: Project
}

input UpdateProjectInput {
  id: ID!
  name: String!
  description: String!
}

type UpdateProjectPayload {
  project: Project
}

# user

type User implements Node & Namespace {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  path: String
  fullName: String
  fullPath: String
  username: String
  visibility: Visibility!
  description: String
  avatarUrl: String

  active: Boolean
  role: Role
  location: String
  websiteUrl: String

  emails: EmailConnection
  unconfirmedEmails: EmailConnection
}

enum Role {
  USER
  ADMIN
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserConnection {
  edges: [UserEdge!]
  pageInfo: PageInfo
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField!
}

enum UserOrderField {
  CREATED_AT
  UPDATED_AT
  USERNAME
}

input UserFilter {
  query: String
}

input CreateUserInput {
  email: String!
  name: String!
  username: String!
  password: String!
}

type CreateUserPayload {
  user: User
}

input DeleteUserInput {
  id: ID!
}

type DeleteUserPayload {
  user: User
}

input UpdateActivationEmailInput {
  email: String!
}

type UpdateActivationEmailPayload {
  message: String
}

input SendActivationEmailInput {
  email: String
}

type SendActivationEmailPayload {
  message: String
}

input ActivateUserInput {
  token: String!
}

type ActivateUserPayload {
  message: String
}

input SendPasswordResetEmailInput {
  email: String!
}

type SendPasswordResetEmailPayload {
  message: String
}

input ResetPasswordInput {
  token: String!
  password: String!
}

type ResetPasswordPayload {
  message: String
}

input UpdateUserInput {
  name: String!
  description: String!
  location: String!
  websiteUrl: String!
}

type UpdateUserPayload {
  user: User
}

input UpdatePasswordInput {
  oldPassword: String!
  password: String!
  passwordConfirmation: String!
}

type UpdatePasswordPayload {
  user: User
}

# email

type Email implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  email: String!
  primary: Boolean!
}

type EmailEdge {
  node: Email!
  cursor: String!
}

type EmailConnection {
  edges: [EmailEdge!]
  pageInfo: PageInfo
}
input CreateEmailInput {
  email: String!
}

type CreateEmailPayload {
  email: Email
}

input ConfirmEmailInput {
  token: String!
}

type ConfirmEmailPayload {
  email: Email
}

input SetPrimaryEmailInput {
  email: String!
}

type SetPrimaryEmailPayload {
  email: Email
}

input DeleteEmailInput {
  email: String!
}

type DeleteEmailPayload {
  email: Email
}

# member

enum Access {
  NO_ACCESS
  MIN_ACCESS
  REPORTER
  MAINTAINER
  OWNER
}

type Member {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  access: Access
  namespace: Namespace
  user: User
}

type MemberEdge {
  node: Member!
  cursor: String!
}

type MemberConnection {
  edges: [MemberEdge!]
  pageInfo: PageInfo
}

input MemberFilter {
  query: String
  access: Access
}

enum MemberOrderField {
  CREATED_AT
  UPDATED_AT
  ACCESS
  USERNAME
}

input MemberOrder {
  direction: OrderDirection!
  field: MemberOrderField!
}

input CreateMemberInput {
  fullPath: String!
  userId: String!
  access: Access!
}

type CreateMemberPayload {
  member: Member
}

input UpdateMemberInput {
  id: ID!
  access: Access!
}

type UpdateMemberPayload {
  member: Member
}

input DeleteMemberInput {
  id: ID!
}

type DeleteMemberPayload {
  member: Member
}

# ssh key

enum SshKeyUsage {
  READ
  WRITE
}

type SshKey implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  key: String
  fingerprint: String
  usages: [SshKeyUsage!]
  lastUsedAt: DateTime
  expiresAt: DateTime
  isExpired: Boolean
  namespace: Namespace
}

type SshKeyEdge {
  node: SshKey!
  cursor: String!
}

type SshKeyConnection {
  edges: [SshKeyEdge!]
  pageInfo: PageInfo
}

input SshKeyFilter {
  query: String
  fingerprint: String
}

enum SshKeyOrderField {
  CREATED_AT
  UPDATED_AT
}

input SshKeyOrder {
  direction: OrderDirection!
  field: SshKeyOrderField!
}

input CreateSshKeyInput {
  fullPath: String!
  title: String!
  key: String!
  usages: [SshKeyUsage!]!
  expiresAt: DateTime
}

type CreateSshKeyPayload {
  sshKey: SshKey
}

input UpdateSshKeyInput {
  id: ID!
  title: String!
  usages: [SshKeyUsage!]!
  expiresAt: DateTime
}

type UpdateSshKeyPayload {
  sshKey: SshKey
}

input DeleteSshKeyInput {
  id: ID!
}

type DeleteSshKeyPayload {
  sshKey: SshKey
}

# oauth2

type RegisteredClient implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  clientId: String
  clientName: String
  clientSecret: String
  redirectUris: [String!]
  description: String
  namespace: Namespace
  avatarUrl: String
}

type RegisteredClientEdge {
  node: RegisteredClient!
  cursor: String!
}

type RegisteredClientConnection {
  edges: [RegisteredClientEdge!]
  pageInfo: PageInfo
}

input RegisteredClientFilter {
  query: String
}

input RegisteredClientOrder {
  direction: OrderDirection!
  field: RegisteredClientOrderField!
}

enum RegisteredClientOrderField {
  CREATED_AT
  UPDATED_AT
  CLIENT_ID
}

input CreateRegisteredClientInput {
  fullPath: String!
  clientName: String!
  redirectUris: [String!]!
  description: String
}

type CreateRegisteredClientPayload {
  registeredClient: RegisteredClient
}

input DeleteRegisteredClientInput {
  id: ID!
}

type DeleteRegisteredClientPayload {
  registeredClient: RegisteredClient
}

input UpdateRegisteredClientInput {
  id: ID!
  clientName: String!
  redirectUris: [String!]!
  description: String
}

type UpdateRegisteredClientPayload {
  registeredClient: RegisteredClient
}

# repository

type Repository implements Node {
  id: ID!
  empty: Boolean
  defaultBranch: Branch
  revisionPath(revisionPath: String): RevisionPath
  commit(revision: String): Commit
  branches(
    first: Int = 20
    after: String
    filterBy: BranchFilter
    orderBy: BranchOrder = { field: NAME, direction: ASC }
  ): BranchConnection
  tags(
    first: Int = 20
    after: String
    filterBy: TagFilter
    orderBy: TagOrder = { field: NAME, direction: ASC }
  ): TagConnection
  commits(
    first: Int = 20
    after: String
    filterBy: CommitFilter!
  ): CommitConnection
  blob(
    revision: String
    path: String
  ): Blob
  tree(
    revision: String
    path: String
  ): TreeEntryConnection
  diffs(
    oldRevision: String
    newRevision: String!
    first: Int = 20
    after: String
  ): DiffConnection
}

# branch

type Branch {
  id: ID!
  name: String!
  commit: Commit
}

type BranchEdge {
  node: Branch!
  cursor: String!
}

type BranchConnection {
  edges: [BranchEdge!]
  pageInfo: PageInfo
}

input BranchFilter {
  query: String
}

input BranchOrder {
  direction: OrderDirection!
  field: BranchOrderField!
}

enum BranchOrderField {
  NAME
  AUTHOR_DATE
  COMMITTER_DATE
}

input CreateBranchInput {
  fullPath: String!
  revision: String!
  name: String!
}

type CreateBranchPayload {
  repositoryId: ID!
  branch: Branch!
}

input DeleteBranchInput {
  fullPath: String!
  name: String!
}

type DeleteBranchPayload {
  repositoryId: ID!
  branch: Branch!
}

# tag

type Tag {
  id: ID!
  name: String!
  commit: Commit
  tagger: GitUser
  shortMessage: String
  fullMessage: String
}

type TagEdge {
  node: Tag!
  cursor: String!
}

type TagConnection {
  edges: [TagEdge!]
  pageInfo: PageInfo
}

input TagFilter {
  query: String
}

input TagOrder {
  direction: OrderDirection!
  field: TagOrderField!
}

enum TagOrderField {
  NAME
  AUTHOR_DATE
  COMMITTER_DATE
}

input CreateTagInput {
  fullPath: String!
  revision: String!
  name: String!
  message: String!
}

type CreateTagPayload {
  repositoryId: ID!
  tag: Tag!
}

input DeleteTagInput {
  fullPath: String!
  name: String!
}

type DeleteTagPayload {
  repositoryId: ID!
  tag: Tag!
}

# revision path

type RevisionPath implements Node {
  id: ID!
  revision: String!
  path: String!
  type: String!
}

# commit

type Commit implements Node {
  id: ID!
  sha: String!
  parentShas: [String!]
  author: GitUser
  committer: GitUser
  shortMessage: String
  fullMessage: String
}

type CommitEdge {
  node: Commit!
  cursor: String!
}

type CommitConnection {
  edges: [CommitEdge!]
  pageInfo: PageInfo
}

input CommitFilter {
  revision: String!
  path: String
  email: String
}

# git user

type GitUser {
  name: String
  email: String
  date: DateTime
}

# blob

type Blob implements Node {
  id: ID!
  sha: String
  name: String
  path: String
  mode: Int
  size: Long
  linesCount: Int
  lines(
    first: Int
    after: String
  ): BlobLineConnection
}

type BlobLine {
  number: Int
  text: String
  html: String
}

type BlobLineEdge {
  node: BlobLine!
  cursor: String!
}

type BlobLineConnection {
  edges: [BlobLineEdge!]
  pageInfo: PageInfo
}

# tree

type TreeEntry implements Node {
  id: ID!
  sha: String
  name: String
  path: String
  mode: Int
  type: String
}

type TreeEntryEdge {
  node: TreeEntry!
  cursor: String!
}

type TreeEntryConnection {
  edges: [TreeEntryEdge!]
  pageInfo: PageInfo
}

# diff

enum DiffType {
  ADD,
  MODIFY,
  DELETE,
  RENAME,
  COPY
}

enum DiffLineType {
  ADD,
  DELETE,
  MATCH,
  META,
  EXPAND,
}

type DiffLine {
  type: DiffLineType!
  oldNumber: Int!
  newNumber: Int!
  text: String
  html: String
}

type Diff implements Node {
  id: ID!
  type: DiffType
  oldPath: String
  newPath: String
  oldSha: String
  newSha: String
  oldMode: Int
  newMode: Int
  diff: String
  lines: [DiffLine!]
}

type DiffEdge {
  node: Diff!
  cursor: String!
}

type DiffConnection {
  edges: [DiffEdge!]
  pageInfo: PageInfo
}

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.notfound.gitone.server.mappers.MemberMapper">
    <resultMap id="memberMap" type="cn.notfound.gitone.server.entities.MemberEntity">
        <id property="id" column="id" jdbcType="INTEGER" />
        <result property="createdAt" column="created_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
        <result property="updatedAt" column="updated_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
        <result property="namespaceId" column="namespace_id" jdbcType="INTEGER" />
        <result property="userId" column="user_id" jdbcType="INTEGER" />
        <result property="access" column="access" jdbcType="INTEGER" />
        <result property="createdById" column="created_by_id" jdbcType="INTEGER" />
    </resultMap>
    <resultMap id="memberUserMap" type="cn.notfound.gitone.server.entities.MemberEntity" extends="memberMap">
        <result property="username" column="full_path" jdbcType="VARCHAR" />
    </resultMap>
    <sql id="memberColumns">
        mb.id,
        mb.created_at,
        mb.updated_at,
        mb.namespace_id,
        mb.user_id,
        mb.access,
        mb.created_by_id
    </sql>
    <sql id="memberUserColumns">
        <include refid="memberColumns" />,
        u.full_path
    </sql>
    <sql id="filter">
        <if test="filter.traversalIds != null and !filter.traversalIds.empty ">
            AND mb.namespace_id IN
            <foreach collection="filter.traversalIds " open="(" item="namespaceId" separator="," close=")" >
                #{namespaceId,jdbcType=INTEGER}
            </foreach>
        </if>
        <if test="filter.access != null">
            AND mb.access = #{filter.access,jdbcType=INTEGER}
        </if>
    </sql>
    <sql id="direction">${page.direction(before)}</sql>
    <sql id="cursorOp">
        <choose>
            <when test="cursor.createdAt != null">
                AND (
                    mb.created_at = #{cursor.createdAt,jdbcType=TIMESTAMP_WITH_TIMEZONE} AND mb.id &gt; #{cursor.id,jdbcType=INTEGER}
                    OR mb.created_at <include refid="direction" /> #{cursor.createdAt,jdbcType=TIMESTAMP_WITH_TIMEZONE}
                )
            </when>
            <when test="cursor.updatedAt != null">
                AND (
                    mb.updated_at = #{cursor.updatedAt,jdbcType=TIMESTAMP_WITH_TIMEZONE} AND mb.id &gt; #{cursor.id,jdbcType=INTEGER}
                    OR mb.updated_at <include refid="direction" /> #{cursor.updatedAt,jdbcType=TIMESTAMP_WITH_TIMEZONE}
                )
            </when>
            <when test="cursor.access != null">
                AND (
                    mb.access = #{cursor.access,jdbcType=INTEGER} AND mb.id &gt; #{cursor.id,jdbcType=INTEGER}
                    OR mb.access <include refid="direction" /> #{cursor.access,jdbcType=INTEGER}
                )
            </when>
            <when test="cursor.username != null">
                AND (
                    u.full_path = #{cursor.username,jdbcType=INTEGER} AND mb.id &gt; #{cursor.id,jdbcType=INTEGER}
                    OR u.full_path <include refid="direction" /> #{cursor.username,jdbcType=INTEGER}
                )
            </when>
        </choose>
    </sql>
    <sql id="page">
        <if test="page.before != null">
            <bind name="before" value="true"/>
            <bind name="cursor" value="page.before"/>
            <include refid="cursorOp" />
        </if>
        <if test="page.after != null">
            <bind name="before" value="false"/>
            <bind name="cursor" value="page.after"/>
            <include refid="cursorOp" />
        </if>
    </sql>
    <select id="find" parameterType="java.lang.Integer" resultMap="memberMap">
        SELECT <include refid="memberColumns" />
        FROM members AS mb
        WHERE mb.id = #{id,jdbcType=INTEGER}
    </select>
    <select id="findByIds" parameterType="java.util.Collection" resultMap="memberMap">
        SELECT <include refid="memberColumns" />
        FROM members AS mb
        WHERE mb.id IN
        <foreach collection="ids" open="(" item="id" separator="," close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </select>
    <select id="findAll" resultMap="memberUserMap">
        SELECT <include refid="memberUserColumns" />
        FROM (
            SELECT DISTINCT ON (mb.user_id) <include refid="memberColumns" />
            FROM members AS mb
            <where>
                <include refid="filter" />
            </where>
            ORDER BY mb.user_id DESC, mb.access DESC
        ) AS mb
        INNER JOIN namespaces AS u ON mb.user_id = u.id
        <where>
            <include refid="page" />
            <if test="filter.query != null">
                AND u.full_path LIKE '%' || #{filter.query,jdbcType=VARCHAR} || '%'
            </if>
        </where>
        <choose>
            <when test="page.order.field.joinUsers">
                ORDER BY u.${page.order.field} ${page.orderDirection}, mb.id ASC
            </when>
            <otherwise>
                ORDER BY ${page.order.field} ${page.orderDirection}, mb.id ASC
            </otherwise>
        </choose>
        LIMIT #{page.limit,jdbcType=INTEGER}
    </select>
    <select id="findByAncestors" resultMap="memberMap">
        SELECT DISTINCT ON (mb.user_id) <include refid="memberColumns" />
        FROM members AS mb
        WHERE mb.user_id = #{userId,jdbcType=INTEGER} AND mb.namespace_id IN
        <foreach collection="traversalIds" open="(" item="id" separator="," close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
        ORDER BY mb.user_id DESC, mb.access DESC
    </select>
    <select id="findByDescendants" resultMap="memberMap">
        SELECT <include refid="memberColumns" />
        FROM members AS mb
            INNER JOIN namespaces AS ns ON mb.namespace_id = ns.id
        WHERE user_id = #{userId,jdbcType=INTEGER} AND #{namespaceId,jdbcType=INTEGER} = ANY(ns.traversal_ids)
        LIMIT 1
    </select>
    <insert id="create" parameterType="cn.notfound.gitone.server.entities.MemberEntity" keyProperty="id" useGeneratedKeys="true" >
        INSERT INTO members (
            created_at,
            updated_at,
            namespace_id,
            user_id,
            access,
            created_by_id
        ) VALUES (
            #{createdAt,jdbcType=TIMESTAMP},
            #{updatedAt,jdbcType=TIMESTAMP},
            #{namespaceId,jdbcType=INTEGER},
            #{userId,jdbcType=INTEGER},
            #{access,jdbcType=INTEGER},
            #{createdById,jdbcType=INTEGER}
        )
    </insert>
    <update id="update" parameterType="cn.notfound.gitone.server.entities.MemberEntity">
        UPDATE members SET
            created_at = #{createdAt,jdbcType=TIMESTAMP},
            updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            namespace_id = #{namespaceId,jdbcType=INTEGER},
            user_id = #{userId,jdbcType=INTEGER},
            access = #{access,jdbcType=INTEGER},
            created_by_id = #{createdById,jdbcType=INTEGER}
        WHERE id = #{id,jdbcType=INTEGER}
    </update>
    <delete id="delete" parameterType="cn.notfound.gitone.server.entities.MemberEntity">
        DELETE FROM members
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByNamespaceId" parameterType="java.lang.Integer">
        DELETE FROM members
        WHERE namespace_id = #{namespaceId,jdbcType=INTEGER}
    </delete>
</mapper>

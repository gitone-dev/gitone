<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.notfound.gitone.server.mappers.NamespaceMapper">
    <resultMap id="namespaceMap" type="cn.notfound.gitone.server.entities.NamespaceEntity">
        <id property="id"  column="id" jdbcType="INTEGER" />
        <result property="createdAt"  column="created_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
        <result property="updatedAt" column="updated_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
        <result property="type" column="type" jdbcType="INTEGER" />
        <result property="parentId" column="parent_id" jdbcType="INTEGER" />
        <result property="traversalIds" column="traversal_ids" jdbcType="ARRAY" />
        <result property="name" column="name" jdbcType="VARCHAR" />
        <result property="path" column="path" jdbcType="VARCHAR" />
        <result property="fullName" column="full_name" jdbcType="VARCHAR" />
        <result property="fullPath" column="full_path" jdbcType="VARCHAR" />
        <result property="visibility" column="visibility" jdbcType="INTEGER" />
        <result property="description" column="description" jdbcType="VARCHAR" />
    </resultMap>
    <resultMap id="namespaceResult" type="cn.notfound.gitone.server.entities.NamespaceEntity">
        <discriminator javaType="java.lang.Integer" column="type">
            <case value="1" resultMap="cn.notfound.gitone.server.mappers.UserMapper.userMap" />
            <case value="2" resultMap="cn.notfound.gitone.server.mappers.GroupMapper.groupMap" />
            <case value="3" resultMap="cn.notfound.gitone.server.mappers.ProjectMapper.projectMap" />
        </discriminator>
    </resultMap>
    <sql id="namespaceColumns">
        ns.id,
        ns.created_at,
        ns.updated_at,
        ns.type,
        ns.parent_id,
        ns.traversal_ids,
        ns.name,
        ns.path,
        ns.full_name,
        ns.full_path,
        ns.visibility,
        ns.description
    </sql>
    <sql id="directWithUser">
        <if test="filter.userId != null">
            WITH direct_with_user AS MATERIALIZED (
                SELECT ns.*
                FROM namespaces AS ns INNER JOIN members AS mb ON ns.id = mb.namespace_id
                WHERE mb.user_id = #{filter.userId,jdbcType=INTEGER}
                <choose>
                    <when test="filter.parentId != null">
                        AND ns.traversal_ids[#{filter.parentLevel,jdbcType=INTEGER}] = #{filter.parentId,jdbcType=INTEGER}
                    </when>
                    <otherwise>
                        UNION
                        SELECT ns.*
                        FROM namespaces AS ns
                        WHERE ns.id = #{filter.userId,jdbcType=INTEGER} AND type = 1
                    </otherwise>
                </choose>
            )
        </if>
    </sql>
    <sql id="directWithViewer">
        <if test="filter.viewerId != null">
            WITH direct_with_viewer AS MATERIALIZED (
                SELECT ns.*
                FROM namespaces AS ns INNER JOIN members AS mb ON ns.id = mb.namespace_id
                WHERE mb.user_id = #{filter.viewerId,jdbcType=INTEGER}
                <choose>
                    <when test="filter.parentId != null">
                        AND ns.traversal_ids[#{filter.parentLevel,jdbcType=INTEGER}] = #{filter.parentId,jdbcType=INTEGER}
                    </when>
                    <otherwise>
                        UNION
                        SELECT ns.*
                        FROM namespaces AS ns
                        WHERE ns.id = #{filter.userId,jdbcType=INTEGER} AND type = 1
                    </otherwise>
                </choose>
            )
        </if>
    </sql>
    <sql id="ancestors">
        SELECT ns.*
        FROM namespaces AS ns
            INNER JOIN (
            <choose>
                <when test="filter.parentId != null and filter.recursive">
                    SELECT DISTINCT UNNEST(du.traversal_ids[#{filter.parentLevel,jdbcType=INTEGER} + 1:])
                    FROM direct_with_user AS du
                    WHERE du.traversal_ids[#{filter.parentLevel,jdbcType=INTEGER}] = #{filter.parentId,jdbcType=INTEGER}
                </when>
                <when test="filter.parentId != null and !filter.recursive">
                    SELECT DISTINCT du.traversal_ids[#{filter.parentLevel,jdbcType=INTEGER} + 1]
                    FROM direct_with_user AS du
                    WHERE du.traversal_ids[#{filter.parentLevel,jdbcType=INTEGER}] = #{filter.parentId,jdbcType=INTEGER}
                </when>
                <when test="filter.parentId == null and filter.recursive">
                    SELECT DISTINCT UNNEST(du.traversal_ids)
                    FROM direct_with_user AS du
                </when>
                <when test="filter.parentId == null and !filter.recursive">
                    SELECT DISTINCT du.traversal_ids[1]
                    FROM direct_with_user AS du
                </when>
            </choose>
        ) AS ancestors (ancestor_id) ON ns.id = ancestors.ancestor_id
    </sql>
    <sql id="descendants">
        SELECT ns.*
        FROM namespaces AS ns, direct_with_user AS du
        WHERE du.id = ANY(ns.traversal_ids)
    </sql>
    <sql id="all">
        SELECT ns.*
        FROM namespaces AS ns
        <choose>
            <when test="filter.parentId != null and filter.recursive">
                WHERE ns.traversal_ids[#{filter.parentLevel,jdbcType=INTEGER}] = #{filter.parentId,jdbcType=INTEGER}
                AND ns.id != #{filter.parentId,jdbcType=INTEGER}
            </when>
            <when test="filter.parentId != null and !filter.recursive">
                WHERE ns.parent_id = #{filter.parentId,jdbcType=INTEGER}
            </when>
            <when test="filter.parentId == null and !filter.recursive">
                WHERE ns.parent_id = 0
            </when>
        </choose>
    </sql>
    <sql id="allWithUser">
        <choose>
            <when test="filter.userId == null">
                <include refid="all" />
            </when>
            <when test="filter.recursive">
                <include refid="directWithUser" />
                SELECT ns.*
                FROM (
                    (
                        <include refid="ancestors" />
                    )
                    UNION
                    (
                        <include refid="descendants" />
                    )
                ) AS ns
            </when>
            <otherwise>
                <include refid="directWithUser" />
                <include refid="ancestors" />
            </otherwise>
        </choose>
    </sql>
    <sql id="allWithViewer">
        <choose>
            <when test="filter.viewerId == null">
                <include refid="allWithUser" />
            </when>
            <otherwise>
                <include refid="directWithViewer" />
                SELECT ns.*
                FROM (
                    <include refid="allWithUser" />
                ) AS ns
                WHERE ns.visibility = 40 OR EXISTS (
                    SELECT dv.id
                    FROM direct_with_viewer AS dv
                    WHERE ns.id = ANY (dv.traversal_ids) OR dv.id = ANY (ns.traversal_ids)
                )
            </otherwise>
        </choose>
    </sql>
    <sql id="filter">
        <if test="filter.visibility != null">
            AND ns.visibility = #{filter.visibility,jdbcType=INTEGER}
        </if>
        <if test="filter.query != null">
            AND ns.path like '%' || #{filter.query,jdbcType=VARCHAR} || '%'
        </if>
        <if test="filter.types != null">
            AND ns.type IN
            <foreach collection="filter.types" open="(" item="type" separator="," close=")">
                #{type,jdbcType=INTEGER}
            </foreach>
        </if>
    </sql>
    <sql id="direction">${page.direction(before)}</sql>
    <sql id="cursorOp">
        <choose>
            <when test="cursor.createdAt != null">
                AND (
                    ns.created_at = #{cursor.createdAt,jdbcType=TIMESTAMP_WITH_TIMEZONE} AND ns.id &gt; #{cursor.id,jdbcType=INTEGER}
                    OR ns.created_at <include refid="direction" /> #{cursor.createdAt,jdbcType=TIMESTAMP_WITH_TIMEZONE}
                )
            </when>
            <when test="cursor.updatedAt != null">
                AND (
                    ns.updated_at = #{cursor.updatedAt,jdbcType=TIMESTAMP_WITH_TIMEZONE} AND ns.id &gt; #{cursor.id,jdbcType=INTEGER}
                    OR ns.updated_at <include refid="direction" /> #{cursor.updatedAt,jdbcType=TIMESTAMP_WITH_TIMEZONE}
                )
            </when>
            <when test="cursor.path != null">
                AND (
                    ns.path = #{cursor.path,jdbcType=VARCHAR} AND ns.id &gt; #{cursor.id,jdbcType=INTEGER}
                    OR ns.path <include refid="direction" /> #{cursor.path,jdbcType=VARCHAR}
                )
            </when>
        </choose>
    </sql>
    <sql id="page">
        <if test="page.before != null">
            <bind name="before" value="true"/>
            <bind name="cursor" value="page.before"/>
            <include refid="cursorOp" />
        </if>
        <if test="page.after != null">
            <bind name="before" value="false"/>
            <bind name="cursor" value="page.after"/>
            <include refid="cursorOp" />
        </if>
    </sql>
    <sql id="insert">
        INSERT INTO namespaces (
            created_at,
            updated_at,
            type,
            parent_id,
            traversal_ids,
            name,
            path,
            full_name,
            full_path,
            visibility,
            description
        ) VALUES (
            #{createdAt,jdbcType=TIMESTAMP_WITH_TIMEZONE},
            #{updatedAt,jdbcType=TIMESTAMP_WITH_TIMEZONE},
            #{type,jdbcType=INTEGER},
            #{parentId,jdbcType=INTEGER},
            #{traversalIds,jdbcType=ARRAY},
            #{name,jdbcType=VARCHAR},
            #{path,jdbcType=VARCHAR},
            #{fullName,jdbcType=VARCHAR},
            #{fullPath,jdbcType=VARCHAR},
            #{visibility,jdbcType=INTEGER},
            #{description,jdbcType=VARCHAR}
        )
    </sql>
    <sql id="update">
        UPDATE namespaces SET
            created_at = #{createdAt,jdbcType=TIMESTAMP_WITH_TIMEZONE},
            updated_at = #{updatedAt,jdbcType=TIMESTAMP_WITH_TIMEZONE},
            type = #{type,jdbcType=INTEGER},
            parent_id = #{parentId,jdbcType=INTEGER},
            traversal_ids = #{traversalIds,jdbcType=ARRAY},
            name = #{name,jdbcType=VARCHAR},
            path = #{path,jdbcType=VARCHAR},
            full_name = #{fullName,jdbcType=VARCHAR},
            full_path = #{fullPath,jdbcType=VARCHAR},
            visibility = #{visibility,jdbcType=INTEGER},
            description = #{description,jdbcType=VARCHAR}
        WHERE id = #{id,jdbcType=INTEGER}
    </sql>
    <select id="find" parameterType="java.lang.Integer" resultMap="namespaceResult">
        SELECT <include refid="namespaceColumns" />
        FROM namespaces AS ns
        WHERE ns.id = #{id,jdbcType=INTEGER}
    </select>
    <select id="findByIds" parameterType="java.util.Collection" resultMap="namespaceResult">
        SELECT <include refid="namespaceColumns" />
        FROM namespaces AS ns
        WHERE ns.id IN
        <foreach collection="ids" open="(" item="id" separator="," close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </select>
    <select id="findByFullPath" parameterType="java.lang.String" resultMap="namespaceResult">
        SELECT <include refid="namespaceColumns" />
        FROM namespaces AS ns
        WHERE ns.full_path = #{fullPath,jdbcType=VARCHAR}
    </select>
    <select id="findByDescendants" resultMap="namespaceMap">
        SELECT <include refid="namespaceColumns" />
        FROM namespaces AS ns
        WHERE #{namespaceId,jdbcType=INTEGER} = ANY(ns.traversal_ids)
    </select>
    <select id="findAll" resultMap="namespaceResult">
        SELECT <include refid="namespaceColumns" />
        FROM (
            <include refid="allWithViewer" />
        ) AS ns
        <where>
            <include refid="filter" />
            <include refid="page" />
        </where>
        ORDER BY ns.${page.order.field} ${page.orderDirection}, ns.id ASC
        LIMIT #{page.limit,jdbcType=INTEGER}
    </select>
    <insert id="create" parameterType="cn.notfound.gitone.server.entities.NamespaceEntity" keyProperty="id" useGeneratedKeys="true" >
        <include refid="insert" />
    </insert>
    <update id="update" parameterType="cn.notfound.gitone.server.entities.NamespaceEntity">
        <include refid="update" />
    </update>
    <delete id="delete" parameterType="cn.notfound.gitone.server.entities.NamespaceEntity">
        DELETE FROM namespaces
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>
</mapper>

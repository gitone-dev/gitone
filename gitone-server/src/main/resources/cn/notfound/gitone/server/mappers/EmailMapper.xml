<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.notfound.gitone.server.mappers.EmailMapper">
    <resultMap id="emailMap" type="cn.notfound.gitone.server.entities.EmailEntity">
        <id property="id"  column="id" jdbcType="INTEGER" />
        <result property="createdAt"  column="created_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
        <result property="updatedAt" column="updated_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
        <result property="userId" column="user_id" jdbcType="INTEGER" />
        <result property="email" column="email" jdbcType="VARCHAR" />
        <result property="confirmationToken" column="confirmation_token" jdbcType="VARCHAR" />
        <result property="confirmationSentAt" column="confirmation_sent_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
        <result property="confirmedAt" column="confirmed_at" jdbcType="TIMESTAMP_WITH_TIMEZONE" />
    </resultMap>
    <sql id="emailColumns">
        id,
        created_at,
        updated_at,
        user_id,
        email,
        confirmation_token,
        confirmation_sent_at,
        confirmed_at
    </sql>
    <select id="find" parameterType="java.lang.Integer" resultMap="emailMap">
        SELECT <include refid="emailColumns" />
        FROM emails
        WHERE id = #{id,jdbcType=INTEGER}
    </select>
    <select id="findByIds" parameterType="java.util.Collection" resultMap="emailMap">
        SELECT <include refid="emailColumns" />
        FROM emails
        WHERE id IN
        <foreach collection="ids" open="(" item="id" separator="," close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </select>
    <select id="findByEmail" parameterType="java.lang.String" resultMap="emailMap">
        SELECT <include refid="emailColumns" />
        FROM emails
        WHERE email = #{email,jdbcType=VARCHAR}
    </select>
    <select id="findByConfirmationToken" parameterType="java.lang.String" resultMap="emailMap">
        SELECT <include refid="emailColumns" />
        FROM emails
        WHERE confirmation_token = #{confirmationToken,jdbcType=VARCHAR}
    </select>
    <select id="findByUserId" parameterType="java.lang.Integer" resultMap="emailMap">
        SELECT <include refid="emailColumns" />
        FROM emails
        WHERE user_id = #{userId,jdbcType=INTEGER} ORDER BY id DESC
    </select>
    <select id="countByUserId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        SELECT count(id)
        FROM emails
        WHERE user_id = #{userId,jdbcType=INTEGER}
    </select>
    <insert id="create" parameterType="cn.notfound.gitone.server.entities.EmailEntity" keyProperty="id" useGeneratedKeys="true" >
        INSERT INTO emails (
            created_at,
            updated_at,
            user_id,
            email,
            confirmation_token,
            confirmation_sent_at,
            confirmed_at
        ) VALUES (
            #{createdAt,jdbcType=TIMESTAMP_WITH_TIMEZONE},
            #{updatedAt,jdbcType=TIMESTAMP_WITH_TIMEZONE},
            #{userId,jdbcType=INTEGER},
            #{email,jdbcType=VARCHAR},
            #{confirmationToken,jdbcType=VARCHAR},
            #{confirmationSentAt,jdbcType=TIMESTAMP},
            #{confirmedAt,jdbcType=TIMESTAMP}
        )
    </insert>
    <update id="update" parameterType="cn.notfound.gitone.server.entities.EmailEntity">
        UPDATE emails SET
            created_at = #{createdAt,jdbcType=TIMESTAMP},
            updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            user_id = #{userId,jdbcType=INTEGER},
            email = #{email,jdbcType=VARCHAR},
            confirmation_token = #{confirmationToken,jdbcType=VARCHAR},
            confirmation_sent_at = #{confirmationSentAt,jdbcType=TIMESTAMP},
            confirmed_at = #{confirmedAt,jdbcType=TIMESTAMP}
        WHERE id = #{id,jdbcType=INTEGER}
    </update>
    <delete id="delete" parameterType="cn.notfound.gitone.server.entities.EmailEntity">
        DELETE FROM emails
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>
</mapper>
